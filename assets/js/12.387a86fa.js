(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{363:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"nodelist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodelist"}},[t._v("#")]),t._v(" NodeList")]),t._v(" "),e("p",[e("em",[t._v("注: 搬运自MDN")]),t._v(" "),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("code",[t._v("NodeList")]),t._v(" 对象是节点的集合，通常是由属性，如"),e("code",[t._v("Node.childNodes")]),t._v(" 和 方法，如"),e("code",[t._v("document.querySelectorAll")]),t._v(" 返回的。")]),t._v(" "),e("p",[e("code",[t._v("NodeList")]),t._v(" 不是一个数组，是一个类似数组的对象("),e("em",[t._v("Like Array Object")]),t._v(")。虽然 "),e("code",[t._v("NodeList")]),t._v(" 不是一个数组，但是可以使用 "),e("code",[t._v("forEach()")]),t._v(" 来迭代。你还可以使用 "),e("code",[t._v("Array.from()")]),t._v(" 将其转换为数组。")]),t._v(" "),e("p",[t._v("不过，有些浏览器较为过时，没有实现 "),e("code",[t._v("NodeList.forEach()")]),t._v(" 和 "),e("code",[t._v("Array.from()")]),t._v("。你可以用 "),e("code",[t._v("Array.prototype.forEach()")]),t._v(" 来规避这一问题。请查看该例。")]),t._v(" "),e("p",[t._v("在一些情况下，"),e("code",[t._v("NodeList")]),t._v(" 是一个实时集合，也就是说，如果文档中的节点树发生变化，NodeList 也会随之变化。例如，")]),t._v(" "),e("p",[e("code",[t._v("Node.childNodes")]),t._v(" 是实时的：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parent "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'parent'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" child_nodes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child_nodes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们假设结果会是“2”")]),t._v("\nparent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child_nodes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但此时的输出是“3”")]),t._v("\n")])])]),e("p",[t._v("在其他情况下，"),e("code",[t._v("NodeList")]),t._v(" 是一个静态集合，也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。比如  "),e("code",[t._v("document.querySelectorAll")]),t._v(" 就会返回一个静态 "),e("code",[t._v("NodeList。")])]),t._v(" "),e("p",[t._v("最好牢记这种不同，尤其是在当你选择 "),e("code",[t._v("NodeList")]),t._v(" 中所有项遍历的方式，或缓存它的长度的时候。")]),t._v(" "),e("h2",{attrs:{id:"属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),e("p",[t._v("NodeList.length\n"),e("code",[t._v("NodeList")]),t._v(" 中包含的节点个数。")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("NodeList.item()\n返回 NodeList 对象中指定索引的节点，如果索引越界，则返回null。等价的写法是 nodeList[i]，不过，在这种情况下，越界访问将返回 "),e("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("NodeList.entries()\nReturns an iterator, allowing code to go through all key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0 and the values are nodes.)")])]),t._v(" "),e("li",[e("p",[t._v("NodeList.forEach()\nExecutes a provided function once per NodeList element, passing the element as an argument to the function.")])]),t._v(" "),e("li",[e("p",[t._v("NodeList.keys()\nReturns an iterator, allowing code to go through all the keys of the key/value pairs contained in the collection. (In this case, the keys are numbers starting from 0.)")])]),t._v(" "),e("li",[e("p",[t._v("NodeList.values()\nReturns an iterator allowing code to go through all values (nodes) of the key/value pairs contained in the collection.")])])]),t._v(" "),e("h2",{attrs:{id:"例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),e("p",[t._v("可以使用 "),e("code",[t._v("for")]),t._v(" 循环遍历一个 "),e("code",[t._v("NodeList")]),t._v(" 对象中的所有的节点：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" myNodeList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" item "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myNodeList"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 myNodeList.item(i) 是没有必要的")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("不要尝试使用 "),e("code",[t._v("for...in")]),t._v(" 或者 "),e("code",[t._v("for each...in")]),t._v(" 来遍历一个 "),e("code",[t._v("NodeList")]),t._v(" 对象中的元素，因为，如果你把上述两个属性也看成 "),e("code",[t._v("element")]),t._v(" 对象的话，"),e("code",[t._v("NodeList")]),t._v(" 对象中的 "),e("code",[t._v("length")]),t._v(" 和 "),e("code",[t._v("item")]),t._v(" 属性也会被遍历出来，这可能会导致你的脚本运行出错。此外，"),e("code",[t._v("for...in")]),t._v(" 不能保证访问这些属性的顺序。\n"),e("code",[t._v("for...of")]),t._v(" 循环将会正确的遍历 "),e("code",[t._v("NodeList")]),t._v(" 对象：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input[type=checkbox]'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" checkbox "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  checkbox"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("checked "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("最近，浏览器也支持一些遍历方法，比如 forEach() 与 entries()、values()、和 keys()。\n也有一种使用数组 Array 的 Array.prototype.forEach 来遍历 NodeList 的方法，这种方法兼容 "),e("code",[t._v("Internet Explorer")]),t._v(" ：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input[type=checkbox]'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("checkbox")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  checkbox"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("checked "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"为什么-nodelist-不是数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-nodelist-不是数组"}},[t._v("#")]),t._v(" 为什么 NodeList 不是数组？")]),t._v(" "),e("p",[e("code",[t._v("NodeList")]),t._v(" 对象在某些方面和数组非常相似，看上去可以直接使用从 "),e("code",[t._v("Array.prototype")]),t._v(" 上继承的方法。然而，除了 "),e("code",[t._v("forEach")]),t._v(" "),e("code",[t._v("方法，NodeList")]),t._v(" 没有这些类似数组的方法。")]),t._v(" "),e("p",[e("code",[t._v("JavaScript")]),t._v(" 的继承机制是基于原型的。数组元素之所以有一些数组方法（比如 "),e("code",[t._v("forEach")]),t._v(" 和 "),e("code",[t._v("map")]),t._v("），是因为它的原型链上有这些方法，如下:\n"),e("code",[t._v("myArray --\x3e Array.prototype --\x3e Object.prototype --\x3e null")]),t._v("（想要获取一个对象的原型链，可以连续地调用 "),e("code",[t._v("Object.getPrototypeOf")]),t._v("，直到原型链尽头）。")]),t._v(" "),e("p",[e("code",[t._v("forEach")]),t._v("，"),e("code",[t._v("map")]),t._v(" 这些方式其实是 "),e("code",[t._v("Array.prototype")]),t._v(" 这个对象的方法。")]),t._v(" "),e("p",[t._v("和数组不一样的是，"),e("code",[t._v("NodeList")]),t._v(" 的原型链是这样的：")]),t._v(" "),e("blockquote",[e("p",[t._v("myNodeList --\x3e NodeList.prototype --\x3e Object.prototype --\x3e null")])]),t._v(" "),e("p",[e("code",[t._v("NodeList")]),t._v("的原型上除了类似数组的 "),e("code",[t._v("forEach")]),t._v(" 方法之外，还有 "),e("code",[t._v("item，entries，keys")]),t._v(" 和 "),e("code",[t._v("values")]),t._v(" 方法。")])])}),[],!1,null,null,null);s.default=n.exports}}]);